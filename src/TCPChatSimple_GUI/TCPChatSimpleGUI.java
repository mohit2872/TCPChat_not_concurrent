/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package TCPChatSimple_GUI;

import java.awt.Color;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author mohitgupta
 */
public class TCPChatSimpleGUI extends javax.swing.JFrame {

    /**
     * Creates new form TCPChatSimpleGUI
     */
    ServerSocket server;
    Socket serSocket;
    Socket client;
    public TCPChatSimpleGUI() {
        initComponents();
        panel1.setLocation(0, -100);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        panel1 = new java.awt.Panel();
        jScrollPane2 = new javax.swing.JScrollPane();
        ClientMessageView = new javax.swing.JTextArea();
        ClientMessage = new javax.swing.JTextField();
        ClientSend = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        Server = new javax.swing.JRadioButton();
        Client = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        IPAddress = new javax.swing.JTextField();
        PortNumber = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        MessageView = new javax.swing.JTextArea();
        Message = new javax.swing.JTextField();
        Send = new javax.swing.JButton();
        Status = new javax.swing.JLabel();
        SignIN = new javax.swing.JButton();
        SingOff = new javax.swing.JButton();

        panel1.setLocation(new java.awt.Point(0, 100));
        panel1.setPreferredSize(new java.awt.Dimension(500, 200));

        ClientMessageView.setColumns(20);
        ClientMessageView.setRows(5);
        jScrollPane2.setViewportView(ClientMessageView);

        ClientSend.setText("jButton1");

        jLabel3.setForeground(new java.awt.Color(255, 0, 0));
        jLabel3.setText("Disconnected");

        javax.swing.GroupLayout panel1Layout = new javax.swing.GroupLayout(panel1);
        panel1.setLayout(panel1Layout);
        panel1Layout.setHorizontalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel1Layout.createSequentialGroup()
                .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(ClientMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 387, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ClientSend, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panel1Layout.setVerticalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ClientMessage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ClientSend))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        buttonGroup1.add(Server);
        Server.setSelected(true);
        Server.setText("Server");
        Server.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ServerActionPerformed(evt);
            }
        });

        buttonGroup1.add(Client);
        Client.setText("Client");

        jLabel1.setText("IP Address");

        jLabel2.setText("Port Number");

        PortNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PortNumberActionPerformed(evt);
            }
        });

        MessageView.setColumns(20);
        MessageView.setRows(5);
        jScrollPane1.setViewportView(MessageView);

        Send.setText("Send");
        Send.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SendActionPerformed(evt);
            }
        });

        Status.setForeground(new java.awt.Color(255, 0, 0));
        Status.setText("Disconnected");

        SignIN.setText("Sign In");
        SignIN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SignINActionPerformed(evt);
            }
        });

        SingOff.setText("Sign Off");
        SingOff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SingOffActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(Server)
                        .addGap(157, 157, 157)
                        .addComponent(Client))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Status)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 449, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Message, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Send, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(SignIN)
                                        .addGap(106, 106, 106)
                                        .addComponent(SingOff))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(IPAddress)
                                        .addComponent(PortNumber, javax.swing.GroupLayout.DEFAULT_SIZE, 363, Short.MAX_VALUE)))))))
                .addContainerGap(122, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Server)
                    .addComponent(Client))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(IPAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(PortNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SignIN)
                    .addComponent(SingOff))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Send, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(Message))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Status)
                .addGap(23, 23, 23))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ServerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ServerActionPerformed

    private void SignINActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SignINActionPerformed
        // TODO add your handling code here:
        if(Server.isSelected()){
            int portNumber = Integer.parseInt(PortNumber.getText());
            try {
                server = new ServerSocket(portNumber);
                serSocket = server.accept();
                System.out.println("Server ServerSocket is now connected");
                System.out.println("Server Socket is now connected");
            } catch (IOException ex) {
                Logger.getLogger(TCPChatSimpleGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            Status.setText("Connected");
            Status.setForeground(Color.green);
        } else if(Client.isSelected()){
            int portNumber = Integer.parseInt(PortNumber.getText());
            try {
                client = new Socket(IPAddress.getText(), portNumber);
                System.out.println("Client is now connected");
            } catch (IOException ex) {
                Logger.getLogger(TCPChatSimpleGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            Status.setText("Connected");
            Status.setForeground(Color.green);
        }
    }//GEN-LAST:event_SignINActionPerformed

    private void SendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SendActionPerformed
        // TODO add your handling code here:
        if(Server.isSelected()){
            try{
                
                PrintWriter out = new PrintWriter(serSocket.getOutputStream(), true);
                BufferedReader in = new BufferedReader(new
                InputStreamReader(serSocket.getInputStream()));
                String inputline;
                // BufferedReader stdin = new BufferedReader(new InputStreamReader(System.in));
                try{
                    while (true){
                        inputline = Message.getText();
                        out.println(inputline);
                        System.out.println("Client Says : "+in.readLine());
                        MessageView.append("Client: " +in.readLine() + "\n" );
                    }
                }
                catch(Exception e){
                    System.exit(0);
                }
                
            }
            catch(IOException ex){
                Logger.getLogger(TCPChatSimpleGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        } else if (Client.isSelected()){       
            PrintWriter out = null;
            try{

                out = new PrintWriter(client.getOutputStream(), true);
                BufferedReader in = new BufferedReader(new InputStreamReader(client.getInputStream()));
                //BufferedReader stdin = new BufferedReader(new InputStreamReader(System.in));
                String userinput;
                
                try{
                    
                    while (true)
                        
                    {
//                        if(in.readLine() != null){
                            String msg = in.readLine();
                            System.out.println("Success");
                            System.out.println("Server Says : " + msg);
                            MessageView.append("Server: " + msg + "\n");
                            System.out.println("Success");
                            userinput = Message.getText();
                            out.println(userinput);
//                        }
                        
                    }
                    
                }
                
                catch(Exception e)
                    
                {
                    
                    System.exit(0);
                    
                }

            }

            catch(IOException ex)

            {

                Logger.getLogger(TCPChatSimpleGUI.class.getName()).log(Level.SEVERE, null, ex);

            } finally {
                out.close();
            }
        }
    }//GEN-LAST:event_SendActionPerformed

    private void SingOffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SingOffActionPerformed
        // TODO add your handling code here:
        if(Server.isSelected()){
            try {
                server.close();
            } catch (IOException ex) {
                Logger.getLogger(TCPChatSimpleGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            Status.setText("Connected");
            Status.setForeground(Color.green);
        } else{
            try {
                client.close();
            } catch (IOException ex) {
                Logger.getLogger(TCPChatSimpleGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            Status.setText("Connected");
            Status.setForeground(Color.green);
        }
    }//GEN-LAST:event_SingOffActionPerformed

    private void PortNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PortNumberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PortNumberActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TCPChatSimpleGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TCPChatSimpleGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TCPChatSimpleGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TCPChatSimpleGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TCPChatSimpleGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton Client;
    private javax.swing.JTextField ClientMessage;
    private javax.swing.JTextArea ClientMessageView;
    private javax.swing.JButton ClientSend;
    private javax.swing.JTextField IPAddress;
    private javax.swing.JTextField Message;
    private javax.swing.JTextArea MessageView;
    private javax.swing.JTextField PortNumber;
    private javax.swing.JButton Send;
    private javax.swing.JRadioButton Server;
    private javax.swing.JButton SignIN;
    private javax.swing.JButton SingOff;
    private javax.swing.JLabel Status;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private java.awt.Panel panel1;
    // End of variables declaration//GEN-END:variables
}
